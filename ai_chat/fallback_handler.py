"""
Advanced Fallback Handler for Chatbot
Handles unclear intents, provides smart suggestions, and manages conversation flow
"""

import random
import logging
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from .intent_detector import IntentType, IntentResult
from .context_manager import context_manager

logger = logging.getLogger(__name__)

@dataclass
class FallbackResponse:
    """Response t·ª´ fallback handler"""
    message: str
    suggestions: List[str]
    clarification_needed: bool
    escalate_to_human: bool
    confidence_boost_tips: List[str]

class FallbackHandler:
    """X·ª≠ l√Ω c√°c tr∆∞·ªùng h·ª£p bot kh√¥ng hi·ªÉu ho·∫∑c kh√¥ng ch·∫Øc ch·∫Øn"""
    
    def __init__(self):
        self.clarification_templates = self._build_clarification_templates()
        self.suggestion_templates = self._build_suggestion_templates()
        self.escalation_triggers = self._build_escalation_triggers()
        
    def _build_clarification_templates(self) -> Dict[str, List[str]]:
        """Templates ƒë·ªÉ h·ªèi l√†m r√µ"""
        return {
            'product_search_unclear': [
                "B·∫°n ƒëang t√¨m lo·∫°i s·∫£n ph·∫©m n√†o c·ª• th·ªÉ? V√≠ d·ª•: √°o thun, qu·∫ßn jean, gi√†y th·ªÉ thao...",
                "M√¨nh ch∆∞a hi·ªÉu r√µ b·∫°n mu·ªën t√¨m g√¨. B·∫°n c√≥ th·ªÉ m√¥ t·∫£ chi ti·∫øt h∆°n kh√¥ng?",
                "ƒê·ªÉ t√¨m ƒë∆∞·ª£c s·∫£n ph·∫©m ph√π h·ª£p, b·∫°n c√≥ th·ªÉ cho m√¨nh bi·∫øt: lo·∫°i s·∫£n ph·∫©m, size, m√†u s·∫Øc, gi√° c·∫£?",
            ],
            'price_unclear': [
                "B·∫°n mu·ªën h·ªèi gi√° s·∫£n ph·∫©m n√†o? Ho·∫∑c ƒëang t√¨m s·∫£n ph·∫©m trong t·∫ßm gi√° bao nhi√™u?",
                "M√¨nh c·∫ßn bi·∫øt t√™n s·∫£n ph·∫©m ƒë·ªÉ check gi√° cho b·∫°n nh√©!",
                "B·∫°n c√≥ th·ªÉ n√≥i r√µ h∆°n v·ªÅ s·∫£n ph·∫©m v√† m·ª©c gi√° mong mu·ªën kh√¥ng?",
            ],
            'size_unclear': [
                "B·∫°n c·∫ßn t∆∞ v·∫•n size cho s·∫£n ph·∫©m n√†o? V√† hi·ªán t·∫°i b·∫°n m·∫∑c size g√¨?",
                "ƒê·ªÉ t∆∞ v·∫•n size ch√≠nh x√°c, b·∫°n c√≥ th·ªÉ cho m√¨nh bi·∫øt chi·ªÅu cao, c√¢n n·∫∑ng kh√¥ng?",
                "Size n√†o b·∫°n ƒëang quan t√¢m? S, M, L hay size s·ªë?",
            ],
            'general_unclear': [
                "M√¨nh ch∆∞a hi·ªÉu r√µ √Ω b·∫°n. B·∫°n c√≥ th·ªÉ n√≥i l·∫°i b·∫±ng c√°ch kh√°c kh√¥ng?",
                "B·∫°n c√≥ th·ªÉ m√¥ t·∫£ chi ti·∫øt h∆°n ƒë·ªÉ m√¨nh h·ªó tr·ª£ t·ªët h∆°n?",
                "Xin l·ªói, m√¨nh ch∆∞a n·∫Øm ƒë∆∞·ª£c √Ω b·∫°n. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨ c·ª• th·ªÉ?",
            ]
        }
    
    def _build_suggestion_templates(self) -> Dict[str, List[str]]:
        """Templates g·ª£i √Ω h√†nh ƒë·ªông"""
        return {
            'product_suggestions': [
                "üõçÔ∏è T√¨m s·∫£n ph·∫©m theo danh m·ª•c",
                "üí∞ Xem s·∫£n ph·∫©m theo gi√°",
                "üî• S·∫£n ph·∫©m hot nh·∫•t",
                "üÜï S·∫£n ph·∫©m m·ªõi nh·∫•t",
                "üíé S·∫£n ph·∫©m cao c·∫•p",
                "üè∑Ô∏è S·∫£n ph·∫©m gi·∫£m gi√°",
            ],
            'service_suggestions': [
                "üìè T∆∞ v·∫•n size",
                "üöö Th√¥ng tin v·∫≠n chuy·ªÉn",
                "üîÑ Ch√≠nh s√°ch ƒë·ªïi tr·∫£",
                "üí≥ H∆∞·ªõng d·∫´n thanh to√°n",
                "üìû Li√™n h·ªá t∆∞ v·∫•n vi√™n",
                "‚ùì C√¢u h·ªèi th∆∞·ªùng g·∫∑p",
            ],
            'general_suggestions': [
                "T√¨m s·∫£n ph·∫©m",
                "H·ªèi gi√°",
                "Check size",
                "Xem khuy·∫øn m√£i",
                "Ch√≠nh s√°ch shop",
                "Li√™n h·ªá h·ªó tr·ª£",
            ]
        }
    
    def _build_escalation_triggers(self) -> List[str]:
        """C√°c trigger ƒë·ªÉ chuy·ªÉn l√™n human"""
        return [
            'kh√¥ng h√†i l√≤ng', 'th·∫•t v·ªçng', 't·ªá', 'd·ªü', 'k√©m',
            'khi·∫øu n·∫°i', 'ph√†n n√†n', 'complain', 'manager',
            'gi√°m ƒë·ªëc', 's·∫øp', 'ng∆∞·ªùi ph·ª• tr√°ch',
            'kh√¥ng gi·∫£i quy·∫øt ƒë∆∞·ª£c', 'kh√¥ng h·ªó tr·ª£ ƒë∆∞·ª£c',
            'mu·ªën n√≥i chuy·ªán v·ªõi ng∆∞·ªùi th·∫≠t',
        ]
    
    def handle_low_confidence_intent(self, intent_result: IntentResult, 
                                   user_message: str, session_id: str) -> FallbackResponse:
        """X·ª≠ l√Ω intent c√≥ confidence th·∫•p"""
        
        # L·∫•y context ƒë·ªÉ hi·ªÉu r√µ h∆°n
        context = context_manager.get_conversation_context(session_id, last_n=3)
        
        # Ki·ªÉm tra c√≥ c·∫ßn escalate kh√¥ng
        if self._should_escalate(user_message):
            return self._create_escalation_response()
        
        # X·ª≠ l√Ω theo lo·∫°i intent
        if intent_result.intent == IntentType.PRODUCT_SEARCH:
            return self._handle_unclear_product_search(intent_result, context)
        elif intent_result.intent == IntentType.PRICE_INQUIRY:
            return self._handle_unclear_price_inquiry(intent_result, context)
        elif intent_result.intent == IntentType.SIZE_INQUIRY:
            return self._handle_unclear_size_inquiry(intent_result, context)
        else:
            return self._handle_general_unclear(intent_result, context)
    
    def handle_unknown_intent(self, user_message: str, session_id: str) -> FallbackResponse:
        """X·ª≠ l√Ω intent kh√¥ng x√°c ƒë·ªãnh"""
        
        # Ki·ªÉm tra escalation
        if self._should_escalate(user_message):
            return self._create_escalation_response()
        
        # Ph√¢n t√≠ch context ƒë·ªÉ ƒë∆∞a ra g·ª£i √Ω ph√π h·ª£p
        context = context_manager.get_conversation_context(session_id, last_n=5)
        recent_intents = [turn.get('intent') for turn in context if turn.get('intent')]
        
        # G·ª£i √Ω d·ª±a tr√™n context
        if 'product_search' in recent_intents:
            suggestions = self.suggestion_templates['product_suggestions'][:4]
            message = "M√¨nh c√≥ th·ªÉ gi√∫p b·∫°n t√¨m s·∫£n ph·∫©m theo c√°c c√°ch sau:"
        elif 'price_inquiry' in recent_intents:
            suggestions = ["H·ªèi gi√° s·∫£n ph·∫©m c·ª• th·ªÉ", "T√¨m theo t·∫ßm gi√°", "Xem khuy·∫øn m√£i"]
            message = "B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ gi√° c·∫£ theo c√°c c√°ch n√†y:"
        else:
            suggestions = self.suggestion_templates['general_suggestions'][:6]
            message = "M√¨nh c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n nh·ªØng vi·ªác sau:"
        
        return FallbackResponse(
            message=message,
            suggestions=suggestions,
            clarification_needed=True,
            escalate_to_human=False,
            confidence_boost_tips=self._get_confidence_boost_tips()
        )
    
    def _handle_unclear_product_search(self, intent_result: IntentResult, 
                                     context: List[Dict]) -> FallbackResponse:
        """X·ª≠ l√Ω t√¨m ki·∫øm s·∫£n ph·∫©m kh√¥ng r√µ r√†ng"""
        
        # Ki·ªÉm tra entities c√≥ s·∫µn
        entities = intent_result.entities
        missing_info = []
        
        if not entities.get('product_type'):
            missing_info.append("lo·∫°i s·∫£n ph·∫©m")
        if not entities.get('size'):
            missing_info.append("size")
        if not entities.get('price_range'):
            missing_info.append("t·∫ßm gi√°")
        
        if missing_info:
            clarification = random.choice(self.clarification_templates['product_search_unclear'])
            suggestions = self.suggestion_templates['product_suggestions'][:4]
        else:
            clarification = "M√¨nh ƒë√£ hi·ªÉu y√™u c·∫ßu c·ªßa b·∫°n. ƒê·ªÉ t√¨m ch√≠nh x√°c h∆°n, b·∫°n c√≥ th·ªÉ b·ªï sung th√™m th√¥ng tin:"
            suggestions = ["Ch·ªçn m√†u s·∫Øc", "Ch·ªçn th∆∞∆°ng hi·ªáu", "Xem t·∫•t c·∫£ k·∫øt qu·∫£"]
        
        return FallbackResponse(
            message=clarification,
            suggestions=suggestions,
            clarification_needed=True,
            escalate_to_human=False,
            confidence_boost_tips=["M√¥ t·∫£ chi ti·∫øt s·∫£n ph·∫©m", "ƒê∆∞a ra v√≠ d·ª• c·ª• th·ªÉ"]
        )
    
    def _handle_unclear_price_inquiry(self, intent_result: IntentResult, 
                                    context: List[Dict]) -> FallbackResponse:
        """X·ª≠ l√Ω h·ªèi gi√° kh√¥ng r√µ r√†ng"""
        
        clarification = random.choice(self.clarification_templates['price_unclear'])
        suggestions = [
            "H·ªèi gi√° s·∫£n ph·∫©m c·ª• th·ªÉ",
            "T√¨m theo t·∫ßm gi√°",
            "Xem s·∫£n ph·∫©m gi·∫£m gi√°",
            "So s√°nh gi√°"
        ]
        
        return FallbackResponse(
            message=clarification,
            suggestions=suggestions,
            clarification_needed=True,
            escalate_to_human=False,
            confidence_boost_tips=["N√™u t√™n s·∫£n ph·∫©m c·ª• th·ªÉ", "ƒê∆∞a ra t·∫ßm gi√° mong mu·ªën"]
        )
    
    def _handle_unclear_size_inquiry(self, intent_result: IntentResult, 
                                   context: List[Dict]) -> FallbackResponse:
        """X·ª≠ l√Ω h·ªèi size kh√¥ng r√µ r√†ng"""
        
        clarification = random.choice(self.clarification_templates['size_unclear'])
        suggestions = [
            "T∆∞ v·∫•n size theo chi·ªÅu cao/c√¢n n·∫∑ng",
            "Xem b·∫£ng size chi ti·∫øt",
            "So s√°nh size c√°c h√£ng",
            "H·ªèi size s·∫£n ph·∫©m c·ª• th·ªÉ"
        ]
        
        return FallbackResponse(
            message=clarification,
            suggestions=suggestions,
            clarification_needed=True,
            escalate_to_human=False,
            confidence_boost_tips=["Cung c·∫•p th√¥ng tin c∆° th·ªÉ", "N√™u s·∫£n ph·∫©m c·ª• th·ªÉ"]
        )
    
    def _handle_general_unclear(self, intent_result: IntentResult, 
                              context: List[Dict]) -> FallbackResponse:
        """X·ª≠ l√Ω tr∆∞·ªùng h·ª£p chung kh√¥ng r√µ r√†ng"""
        
        clarification = random.choice(self.clarification_templates['general_unclear'])
        suggestions = self.suggestion_templates['general_suggestions'][:5]
        
        return FallbackResponse(
            message=clarification,
            suggestions=suggestions,
            clarification_needed=True,
            escalate_to_human=False,
            confidence_boost_tips=["S·ª≠ d·ª•ng t·ª´ kh√≥a ƒë∆°n gi·∫£n", "Chia nh·ªè c√¢u h·ªèi"]
        )
    
    def _should_escalate(self, user_message: str) -> bool:
        """Ki·ªÉm tra c√≥ c·∫ßn chuy·ªÉn l√™n human kh√¥ng"""
        message_lower = user_message.lower()
        return any(trigger in message_lower for trigger in self.escalation_triggers)
    
    def _create_escalation_response(self) -> FallbackResponse:
        """T·∫°o response cho escalation"""
        return FallbackResponse(
            message="M√¨nh hi·ªÉu b·∫°n c·∫ßn h·ªó tr·ª£ chuy√™n s√¢u h∆°n. ƒê·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n t·ªët nh·∫•t, m√¨nh s·∫Ω k·∫øt n·ªëi b·∫°n v·ªõi t∆∞ v·∫•n vi√™n c·ªßa shop.",
            suggestions=[
                "K·∫øt n·ªëi t∆∞ v·∫•n vi√™n",
                "G·ª≠i ph·∫£n h·ªìi",
                "Li√™n h·ªá hotline",
                "Chat v·ªõi manager"
            ],
            clarification_needed=False,
            escalate_to_human=True,
            confidence_boost_tips=[]
        )
    
    def _get_confidence_boost_tips(self) -> List[str]:
        """L·∫•y tips ƒë·ªÉ c·∫£i thi·ªán giao ti·∫øp"""
        tips = [
            "S·ª≠ d·ª•ng t·ª´ kh√≥a ƒë∆°n gi·∫£n v√† r√µ r√†ng",
            "Chia nh·ªè c√¢u h·ªèi th√†nh nhi·ªÅu ph·∫ßn",
            "ƒê∆∞a ra v√≠ d·ª• c·ª• th·ªÉ",
            "M√¥ t·∫£ chi ti·∫øt nhu c·∫ßu",
            "S·ª≠ d·ª•ng c√°c t·ª´ kh√≥a ph·ªï bi·∫øn"
        ]
        return random.sample(tips, 2)
    
    def generate_contextual_suggestions(self, session_id: str) -> List[str]:
        """T·∫°o g·ª£i √Ω d·ª±a tr√™n context"""
        context = context_manager.get_conversation_context(session_id, last_n=3)
        
        if not context:
            return self.suggestion_templates['general_suggestions'][:4]
        
        # Ph√¢n t√≠ch intent g·∫ßn ƒë√¢y
        recent_intents = [turn.get('intent') for turn in context]
        
        if 'product_search' in recent_intents:
            return [
                "L·ªçc theo gi√°",
                "Ch·ªçn size kh√°c", 
                "Xem s·∫£n ph·∫©m t∆∞∆°ng t·ª±",
                "So s√°nh s·∫£n ph·∫©m"
            ]
        elif 'price_inquiry' in recent_intents:
            return [
                "Xem khuy·∫øn m√£i",
                "So s√°nh gi√°",
                "T√¨m s·∫£n ph·∫©m r·∫ª h∆°n",
                "H·ªèi v·ªÅ combo"
            ]
        else:
            return self.suggestion_templates['general_suggestions'][:4]

# Global instance
fallback_handler = FallbackHandler()
