"""
AI Chatbot Services - X·ª≠ l√Ω logic th√¥ng minh cho chatbot
"""
import re
import json
import unicodedata
from django.db.models import Q
from api.models import Product, Order, Favorite, Category, SubCategory, SizeGuide
from api.serializers import ProductSerializer, OrderSerializer
import ollama


class SmartChatbotService:
    """Service x·ª≠ l√Ω chatbot th√¥ng minh"""
    
    def __init__(self, user):
        self.user = user

    def clean_text_for_db(self, text):
        """Clean text ƒë·ªÉ tr√°nh l·ªói MySQL encoding v·ªõi emoji"""
        if not text:
            return text

        # Remove emoji v√† special characters c√≥ th·ªÉ g√¢y l·ªói MySQL
        try:
            # Test encoding
            text.encode('utf-8').decode('utf-8')
            # Remove 4-byte UTF-8 characters (emoji)
            cleaned = ''.join(char for char in text if ord(char) < 65536)
            return cleaned
        except (UnicodeError, ValueError):
            # Fallback: ch·ªâ gi·ªØ ASCII v√† basic UTF-8
            return ''.join(char for char in text if ord(char) < 1000)

    def clean_markdown_formatting(self, text):
        """Remove markdown formatting t·ª´ text"""
        if not text:
            return text

        # Remove markdown formatting
        import re

        # Remove **bold** formatting
        text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)

        # Remove *italic* formatting
        text = re.sub(r'\*(.*?)\*', r'\1', text)

        # Remove __underline__ formatting
        text = re.sub(r'__(.*?)__', r'\1', text)

        # Remove _italic_ formatting
        text = re.sub(r'_(.*?)_', r'\1', text)

        # Remove ### headers
        text = re.sub(r'^#{1,6}\s*', '', text, flags=re.MULTILINE)

        # Remove ``` code blocks
        text = re.sub(r'```.*?```', '', text, flags=re.DOTALL)

        # Remove ` inline code `
        text = re.sub(r'`(.*?)`', r'\1', text)

        # Remove [link](url) formatting, keep only text
        text = re.sub(r'\[([^\]]+)\]\([^\)]+\)', r'\1', text)

        return text.strip()

    def analyze_message(self, message):
        """Ph√¢n t√≠ch tin nh·∫Øn ƒë·ªÉ x√°c ƒë·ªãnh intent"""
        message_lower = message.lower().strip()
        
        # Intent 1: Personal size recommendation (∆∞u ti√™n cao nh·∫•t)
        import re
        # Pattern m·ªõi h·ªó tr·ª£ 1m56, 1.56m, 156cm, 56kg
        height_weight_patterns = [
            r'(\d+)m(\d+).*?(\d+(?:\.\d+)?)\s*kg',  # 1m56 60kg
            r'(\d+(?:\.\d+)?)\s*(?:m|cm).*?(\d+(?:\.\d+)?)\s*kg',  # 156cm 60kg ho·∫∑c 1.56m 60kg
            r'(\d+(?:\.\d+)?)\s*kg.*?(\d+)m(\d+)',  # 60kg 1m56
            r'(\d+(?:\.\d+)?)\s*kg.*?(\d+(?:\.\d+)?)\s*(?:m|cm)',  # 60kg 156cm
        ]

        for pattern in height_weight_patterns:
            if re.search(pattern, message_lower):
                return {
                    'intent': 'personal_size_recommendation',
                    'confidence': 0.95
                }

        # Intent 2: Size guide (∆∞u ti√™n cao)
        size_keywords = ['size', 'k√≠ch c·ª°', 'k√≠ch th∆∞·ªõc', 'h∆∞·ªõng d·∫´n size', 'b·∫£ng size', 'ch·ªçn size', 'size n√†o', 'm·∫∑c size']
        # Exclude if it's a product search with size mention
        if any(keyword in message_lower for keyword in size_keywords) and not any(word in message_lower for word in ['t√¨m', 'c√≥', 'xem', 'show']):
            return {
                'intent': 'size_guide',
                'confidence': 0.9
            }

        # Intent 3: T√¨m ki·∫øm s·∫£n ph·∫©m (∆∞u ti√™n cao h∆°n price filter)
        product_keywords = {
            '√°o': ['√°o', 'shirt', 'top', 'blouse', 'hoodie', 'sweater'],
            'qu·∫ßn': ['qu·∫ßn', 'pants', 'jeans', 'shorts', 'trouser'],
            'gi√†y': ['gi√†y', 'shoes', 'sneaker', 'boot'],
            't√∫i': ['t√∫i', 'bag', 'backpack', 'handbag'],
            'ph·ª• ki·ªán': ['ph·ª• ki·ªán', 'accessory', 'belt', 'hat', 'cap']
        }

        for category, keywords in product_keywords.items():
            if any(keyword in message_lower for keyword in keywords):
                # T√¨m subcategory chi ti·∫øt h∆°n
                subcategory = self.find_matching_subcategory(message_lower, category)
                return {
                    'intent': 'search_product',
                    'category': category,
                    'subcategory': subcategory,
                    'keywords': keywords
                }

        # Intent 4: Price filter (∆∞u ti√™n th·∫•p h∆°n product search)
        price_keywords = ['gi√°', 'price', 'd∆∞·ªõi', 'tr√™n', 't·ª´', 'ƒë·∫øn', 'k', '000', 'r·∫ª', 'm·∫Øc', 'ti·ªÅn']
        # Ch·ªâ trigger n·∫øu kh√¥ng c√≥ product keywords
        has_product_keywords = any(keyword in message_lower for category_keywords in [
            ['√°o', 'shirt', 'top', 'blouse', 'hoodie', 'sweater'],
            ['qu·∫ßn', 'pants', 'jeans', 'shorts', 'trouser'],
            ['gi√†y', 'shoes', 'sneaker', 'boot'],
            ['t√∫i', 'bag', 'backpack', 'handbag']
        ] for keyword in category_keywords)

        if any(keyword in message_lower for keyword in price_keywords) and not has_product_keywords:
            return {
                'intent': 'price_filter',
                'confidence': 0.7
            }

        # Intent 5: H∆∞·ªõng d·∫´n ƒë·∫∑t h√†ng
        order_guide_keywords = ['c√°ch ƒë·∫∑t h√†ng', 'l√†m sao ƒë·∫∑t h√†ng', 'h∆∞·ªõng d·∫´n ƒë·∫∑t h√†ng', 'ƒë·∫∑t h√†ng nh∆∞ th·∫ø n√†o', 'quy tr√¨nh ƒë·∫∑t h√†ng']
        if any(keyword in message_lower for keyword in order_guide_keywords):
            return {
                'intent': 'order_guide',
                'confidence': 0.9
            }

        # Intent 6: Tra c·ª©u ƒë∆°n h√†ng
        order_keywords = ['ƒë∆°n h√†ng', 'order', 'ƒë·∫∑t h√†ng', 'mua', 'ƒë√£ ƒë·∫∑t', 'ƒë√£ mua']
        if any(keyword in message_lower for keyword in order_keywords):
            return {
                'intent': 'check_orders',
                'keywords': order_keywords
            }

        # Intent 7: S·∫£n ph·∫©m y√™u th√≠ch
        favorite_keywords = ['y√™u th√≠ch', 'favorite', 'th√≠ch', 'wishlist', 'saved']
        if any(keyword in message_lower for keyword in favorite_keywords):
            return {
                'intent': 'show_favorites',
                'keywords': favorite_keywords
            }
        
        # Intent 8: Chat th√¥ng th∆∞·ªùng
        return {
            'intent': 'general_chat',
            'message': message
        }

    def find_matching_subcategory(self, message_lower, category=None):
        """T√¨m subcategory ph√π h·ª£p v·ªõi message"""
        # L·∫•y subcategories theo category n·∫øu c√≥
        if category:
            subcategories = SubCategory.objects.filter(category__title__icontains=category)
        else:
            subcategories = SubCategory.objects.all()

        # T√¨m exact match tr∆∞·ªõc (∆∞u ti√™n cao nh·∫•t)
        for subcategory in subcategories:
            # Check exact title match
            if subcategory.title.lower() in message_lower:
                return subcategory

            # Check exact keyword match
            keywords = subcategory.get_keywords_list()
            for keyword in keywords:
                if keyword in message_lower:
                    return subcategory

        return None
    
    def search_products(self, category, message, subcategory=None):
        """T√¨m ki·∫øm s·∫£n ph·∫©m theo category v√† subcategory"""
        try:
            # Check if message contains price filter
            import re
            price_keywords = ['d∆∞·ªõi', 'tr√™n', 't·ª´', 'ƒë·∫øn', 'tri·ªáu', 'k', 'gi√°']
            has_price = any(keyword in message.lower() for keyword in price_keywords)

            if has_price:
                # Delegate to price search function for better price handling
                price_result = self.search_products_by_price(message)

                # If price search found products, return with category context
                if price_result['type'] == 'product_list':
                    # Add category/subcategory context to message
                    if subcategory:
                        price_result['message'] = f"T√¨m th·∫•y {price_result['count']} {subcategory.title} trong kho·∫£ng gi√° y√™u c·∫ßu:\n\n" + price_result['message'].split('\n\n', 1)[-1]
                        price_result['subcategory'] = subcategory.title
                    else:
                        price_result['message'] = f"T√¨m th·∫•y {price_result['count']} s·∫£n ph·∫©m {category} trong kho·∫£ng gi√° y√™u c·∫ßu:\n\n" + price_result['message'].split('\n\n', 1)[-1]
                        price_result['category_filter'] = category

                return price_result

            # N·∫øu c√≥ subcategory, ∆∞u ti√™n t√¨m theo subcategory
            if subcategory:
                products = Product.objects.filter(
                    subcategory=subcategory,
                    countInStock__gt=0
                ).order_by('-createdAt')[:6]

                if products.exists():
                    serializer = ProductSerializer(products, many=True)
                    return {
                        'type': 'product_list',
                        'message': f"ƒê√¢y l√† nh·ªØng {subcategory.title} hot nh·∫•t hi·ªán t·∫°i:",
                        'products': serializer.data,
                        'count': products.count(),
                        'subcategory': subcategory.title
                    }
                else:
                    # Kh√¥ng c√≥ s·∫£n ph·∫©m trong subcategory c·ª• th·ªÉ
                    return {
                        'type': 'no_products',
                        'message': f"Hi·ªán t·∫°i shop ch∆∞a c√≥ {subcategory.title} n√†o. B·∫°n c√≥ th·ªÉ xem c√°c s·∫£n ph·∫©m kh√°c ho·∫∑c li√™n h·ªá ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n th√™m! üòä",
                        'subcategory': subcategory.title
                    }

            # N·∫øu ch·ªâ h·ªèi "√°o" ‚Üí l·ªçc t·∫•t c·∫£ s·∫£n ph·∫©m c√≥ ch·ªØ "√°o" trong t√™n
            if category == '√°o':
                products = Product.objects.filter(
                    name__icontains='√°o',
                    countInStock__gt=0
                ).order_by('-createdAt')[:6]

                if products.exists():
                    serializer = ProductSerializer(products, many=True)
                    return {
                        'type': 'product_list',
                        'message': f"ƒê√¢y l√† t·∫•t c·∫£ s·∫£n ph·∫©m √°o hi·ªán c√≥:",
                        'products': serializer.data,
                        'count': products.count(),
                        'category_filter': '√°o'
                    }

            # T∆∞∆°ng t·ª± cho qu·∫ßn
            if category == 'qu·∫ßn':
                products = Product.objects.filter(
                    name__icontains='qu·∫ßn',
                    countInStock__gt=0
                ).order_by('-createdAt')[:6]

                if products.exists():
                    serializer = ProductSerializer(products, many=True)
                    return {
                        'type': 'product_list',
                        'message': f"ƒê√¢y l√† t·∫•t c·∫£ s·∫£n ph·∫©m qu·∫ßn hi·ªán c√≥:",
                        'products': serializer.data,
                        'count': products.count(),
                        'category_filter': 'qu·∫ßn'
                    }

            # Fallback: T√¨m category trong database
            category_obj = Category.objects.filter(
                Q(title__icontains=category) |
                Q(title__icontains='√°o') if category == '√°o' else Q() |
                Q(title__icontains='qu·∫ßn') if category == 'qu·∫ßn' else Q() |
                Q(title__icontains='gi√†y') if category == 'gi√†y' else Q() |
                Q(title__icontains='t√∫i') if category == 't√∫i' else Q()
            ).first()
            
            if not category_obj:
                return {
                    'type': 'no_products',
                    'message': f"Xin l·ªói, hi·ªán t·∫°i shop ch∆∞a c√≥ s·∫£n ph·∫©m {category} n√†o. B·∫°n c√≥ th·ªÉ xem c√°c s·∫£n ph·∫©m kh√°c nh√©! üòä"
                }
            
            # L·∫•y s·∫£n ph·∫©m theo category
            products = Product.objects.filter(
                category=category_obj,
                countInStock__gt=0  # Ch·ªâ l·∫•y s·∫£n ph·∫©m c√≤n h√†ng
            ).order_by('-createdAt')[:6]  # Gi·ªõi h·∫°n 6 s·∫£n ph·∫©m
            
            if not products.exists():
                return {
                    'type': 'no_products',
                    'message': f"Hi·ªán t·∫°i kh√¥ng c√≥ {category} n√†o c√≤n h√†ng. Vui l√≤ng quay l·∫°i sau nh√©! üòä"
                }
            
            # Serialize products
            serializer = ProductSerializer(products, many=True)
            
            return {
                'type': 'product_list',
                'message': f"ƒê√¢y l√† nh·ªØng {category} hot nh·∫•t hi·ªán t·∫°i:",
                'products': serializer.data,
                'count': products.count()
            }
            
        except Exception as e:
            return {
                'type': 'error',
                'message': f"C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm s·∫£n ph·∫©m: {str(e)}"
            }
    
    def get_user_orders(self):
        """L·∫•y ƒë∆°n h√†ng c·ªßa user"""
        try:
            orders = Order.objects.filter(user=self.user).order_by('-createdAt')[:5]
            
            if not orders.exists():
                return {
                    'type': 'no_orders',
                    'message': "B·∫°n ch∆∞a c√≥ ƒë∆°n h√†ng n√†o. H√£y mua s·∫Øm ngay ƒë·ªÉ tr·∫£i nghi·ªám d·ªãch v·ª• c·ªßa ch√∫ng t√¥i! üõçÔ∏è"
                }
            
            serializer = OrderSerializer(orders, many=True)
            
            return {
                'type': 'order_list',
                'message': "ƒê√¢y l√† c√°c ƒë∆°n h√†ng g·∫ßn ƒë√¢y c·ªßa b·∫°n:",
                'orders': serializer.data,
                'count': orders.count()
            }
            
        except Exception as e:
            return {
                'type': 'error',
                'message': f"C√≥ l·ªói x·∫£y ra khi tra c·ª©u ƒë∆°n h√†ng: {str(e)}"
            }
    
    def get_user_favorites(self):
        """L·∫•y s·∫£n ph·∫©m y√™u th√≠ch c·ªßa user"""
        try:
            favorites = Favorite.objects.filter(user=self.user).order_by('-created_at')[:6]
            
            if not favorites.exists():
                return {
                    'type': 'no_favorites',
                    'message': "B·∫°n ch∆∞a c√≥ s·∫£n ph·∫©m y√™u th√≠ch n√†o. H√£y th√™m s·∫£n ph·∫©m v√†o danh s√°ch y√™u th√≠ch ƒë·ªÉ d·ªÖ d√†ng t√¨m l·∫°i! ‚ù§Ô∏è"
                }
            
            products = [fav.product for fav in favorites]
            serializer = ProductSerializer(products, many=True)
            
            return {
                'type': 'favorite_list',
                'message': "ƒê√¢y l√† nh·ªØng s·∫£n ph·∫©m b·∫°n ƒë√£ y√™u th√≠ch:",
                'products': serializer.data,
                'count': favorites.count()
            }
            
        except Exception as e:
            return {
                'type': 'error',
                'message': f"C√≥ l·ªói x·∫£y ra khi l·∫•y s·∫£n ph·∫©m y√™u th√≠ch: {str(e)}"
            }
    
    def general_chat(self, message, model='llama3.2:3b'):
        """Chat th√¥ng th∆∞·ªùng v·ªõi AI"""
        try:
            # System prompt cho shopping assistant
            system_prompt = f"""B·∫°n l√† m·ªôt tr·ª£ l√Ω mua s·∫Øm th√¥ng minh v√† th√¢n thi·ªán c·ªßa shop th·ªùi trang.
            H√£y tr·∫£ l·ªùi m·ªôt c√°ch vui v·∫ª, h·ªØu √≠ch v√† chuy√™n nghi·ªáp.

            QUAN TR·ªåNG:
            - KH√îNG s·ª≠ d·ª•ng markdown formatting nh∆∞ **bold**, *italic*, __underline__
            - KH√îNG s·ª≠ d·ª•ng ### headers, ``` code blocks, ho·∫∑c `inline code`
            - Ch·ªâ s·ª≠ d·ª•ng text thu·∫ßn v·ªõi emoji v√† d·∫•u c√¢u b√¨nh th∆∞·ªùng
            - S·ª≠ d·ª•ng d·∫•u g·∫°ch ƒë·∫ßu d√≤ng (-) thay v√¨ markdown lists

            Th√¥ng tin v·ªÅ user: {self.user.username}

            N·∫øu user h·ªèi v·ªÅ:
            - S·∫£n ph·∫©m c·ª• th·ªÉ: G·ª£i √Ω h·ªç n√≥i "t√¨m √°o" ho·∫∑c "t√¨m qu·∫ßn" ƒë·ªÉ xem s·∫£n ph·∫©m
            - ƒê∆°n h√†ng: G·ª£i √Ω h·ªç n√≥i "ƒë∆°n h√†ng c·ªßa t√¥i" ƒë·ªÉ xem chi ti·∫øt
            - Y√™u th√≠ch: G·ª£i √Ω h·ªç n√≥i "s·∫£n ph·∫©m y√™u th√≠ch" ƒë·ªÉ xem danh s√°ch

            H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, th√¢n thi·ªán v√† c√≥ emoji ph√π h·ª£p."""
            
            response = ollama.chat(
                model=model,
                messages=[
                    {'role': 'system', 'content': system_prompt},
                    {'role': 'user', 'content': message}
                ]
            )
            
            # Clean response tr∆∞·ªõc khi return
            cleaned_response = self.clean_text_for_db(response['message']['content'])
            # Remove markdown formatting
            cleaned_response = self.clean_markdown_formatting(cleaned_response)

            return {
                'type': 'general_response',
                'message': cleaned_response
            }
            
        except Exception as e:
            return {
                'type': 'error',
                'message': f"Xin l·ªói, t√¥i ƒëang g·∫∑p m·ªôt ch√∫t v·∫•n ƒë·ªÅ. Vui l√≤ng th·ª≠ l·∫°i sau! üòÖ"
            }
    
    def process_message(self, message, model='llama3.2:3b'):
        """X·ª≠ l√Ω tin nh·∫Øn ch√≠nh"""
        # Clean message tr∆∞·ªõc khi x·ª≠ l√Ω
        message = self.clean_text_for_db(message)

        # Ph√¢n t√≠ch intent
        intent_data = self.analyze_message(message)
        
        # X·ª≠ l√Ω theo intent
        if intent_data['intent'] == 'search_product':
            return self.search_products(
                intent_data['category'],
                message,
                subcategory=intent_data.get('subcategory')
            )
        
        elif intent_data['intent'] == 'check_orders':
            return self.get_user_orders()
        
        elif intent_data['intent'] == 'show_favorites':
            return self.get_user_favorites()

        elif intent_data['intent'] == 'size_guide':
            return self.get_size_guide(message)

        elif intent_data['intent'] == 'personal_size_recommendation':
            return self.get_personal_size_recommendation(message)

        elif intent_data['intent'] == 'price_filter':
            return self.search_products_by_price(message)

        elif intent_data['intent'] == 'order_guide':
            return self.get_order_guide()

        else:  # general_chat
            return self.general_chat(message, model)

    def get_size_guide(self, message):
        """L·∫•y h∆∞·ªõng d·∫´n size cho s·∫£n ph·∫©m"""
        try:
            # T√¨m subcategory t·ª´ message
            subcategory = self.find_matching_subcategory(message.lower())

            if not subcategory:
                return {
                    'type': 'size_guide',
                    'message': """üìè H∆∞·ªõng d·∫´n ch·ªçn size t·ªïng qu√°t:

√Åo Thun:
- Size S: 150-160cm, 45-55kg
- Size M: 160-170cm, 55-65kg
- Size L: 170-175cm, 65-75kg
- Size XL: 175-180cm, 75-85kg

L∆∞u √Ω: H√£y cho t√¥i bi·∫øt b·∫°n mu·ªën xem size guide cho lo·∫°i s·∫£n ph·∫©m n√†o c·ª• th·ªÉ ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n ch√≠nh x√°c h∆°n! üòä

Ho·∫∑c b·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt chi·ªÅu cao v√† c√¢n n·∫∑ng ƒë·ªÉ t√¥i t∆∞ v·∫•n size ph√π h·ª£p nh·∫•t!"""
                }

            # L·∫•y size guides cho subcategory
            size_guides = SizeGuide.objects.filter(subcategory=subcategory).order_by('size__order')

            if not size_guides.exists():
                return {
                    'type': 'size_guide',
                    'message': f"üìè Size Guide cho {subcategory.title}:\n\nHi·ªán t·∫°i ch∆∞a c√≥ b·∫£ng size chi ti·∫øt cho {subcategory.title}. Vui l√≤ng li√™n h·ªá shop ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n size ph√π h·ª£p! üòä"
                }

            # T·∫°o size guide message
            guide_message = f"üìè Size Guide cho {subcategory.title}:\n\n"

            for guide in size_guides:
                guide_message += f"Size {guide.size.name}:\n"
                if guide.get_height_range():
                    guide_message += f"‚Ä¢ Chi·ªÅu cao: {guide.get_height_range()}\n"
                if guide.get_weight_range():
                    guide_message += f"‚Ä¢ C√¢n n·∫∑ng: {guide.get_weight_range()}\n"
                if guide.chest:
                    guide_message += f"‚Ä¢ V√≤ng ng·ª±c: {guide.chest}cm\n"
                if guide.waist:
                    guide_message += f"‚Ä¢ V√≤ng eo: {guide.waist}cm\n"
                if guide.notes:
                    guide_message += f"‚Ä¢ Ghi ch√∫: {guide.notes}\n"
                guide_message += "\n"

            guide_message += "üí° L∆∞u √Ω: ƒê√¢y l√† size guide tham kh·∫£o. N·∫øu b·∫°n c√≥ th·∫Øc m·∫Øc v·ªÅ size, h√£y cho t√¥i bi·∫øt chi·ªÅu cao v√† c√¢n n·∫∑ng ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n c·ª• th·ªÉ h∆°n! üòä"

            return {
                'type': 'size_guide',
                'message': guide_message,
                'subcategory': subcategory.title
            }

        except Exception as e:
            return {
                'type': 'error',
                'message': f"C√≥ l·ªói x·∫£y ra khi l·∫•y size guide: {str(e)}"
            }

    def get_personal_size_recommendation(self, message):
        """T∆∞ v·∫•n size c√° nh√¢n d·ª±a tr√™n chi·ªÅu cao v√† c√¢n n·∫∑ng"""
        try:
            import re

            # Extract height and weight from message v·ªõi teen code support
            height = None
            weight = None

            # Pattern 1: Teen code format 1m56 = 156cm
            teen_pattern = r'(\d+)m(\d+).*?(\d+(?:\.\d+)?)\s*kg'
            match = re.search(teen_pattern, message.lower())
            if match:
                meter = int(match.group(1))
                cm = int(match.group(2))
                height = meter * 100 + cm  # 1m56 = 156cm
                weight = float(match.group(3))

            # Pattern 2: Reverse teen code - weight first
            if not height:
                teen_reverse_pattern = r'(\d+(?:\.\d+)?)\s*kg.*?(\d+)m(\d+)'
                match = re.search(teen_reverse_pattern, message.lower())
                if match:
                    weight = float(match.group(1))
                    meter = int(match.group(2))
                    cm = int(match.group(3))
                    height = meter * 100 + cm

            # Pattern 3: Standard format
            if not height:
                standard_patterns = [
                    r'(\d+(?:\.\d+)?)\s*(?:cm).*?(\d+(?:\.\d+)?)\s*kg',  # 156cm 60kg
                    r'(\d+(?:\.\d+)?)\s*(?:m).*?(\d+(?:\.\d+)?)\s*kg',   # 1.56m 60kg
                    r'(\d+(?:\.\d+)?)\s*kg.*?(\d+(?:\.\d+)?)\s*(?:cm)',  # 60kg 156cm
                    r'(\d+(?:\.\d+)?)\s*kg.*?(\d+(?:\.\d+)?)\s*(?:m)'    # 60kg 1.56m
                ]

                for pattern in standard_patterns:
                    match = re.search(pattern, message.lower())
                    if match:
                        if 'kg.*?cm' in pattern or 'kg.*?m' in pattern:  # weight first
                            weight = float(match.group(1))
                            height_val = float(match.group(2))
                            height = height_val * 100 if height_val < 10 else height_val
                        else:  # height first
                            height_val = float(match.group(1))
                            height = height_val * 100 if height_val < 10 else height_val
                            weight = float(match.group(2))
                        break

            if not height or not weight:
                return {
                    'type': 'size_guide',
                    'message': "ƒê·ªÉ t∆∞ v·∫•n size ch√≠nh x√°c, b·∫°n vui l√≤ng cho t√¥i bi·∫øt chi·ªÅu cao v√† c√¢n n·∫∑ng c·ªßa b·∫°n nh√©! V√≠ d·ª•: 'T√¥i 1m56 56kg' ho·∫∑c 'cao 165cm n·∫∑ng 60kg'"
                }

            # Find recommended size
            recommended_size = self.recommend_size_for_person(height, weight)

            # Get subcategory from message if possible
            subcategory = self.find_matching_subcategory(message.lower())

            response_message = f"üìè T∆∞ v·∫•n size cho b·∫°n (cao {height:.0f}cm, n·∫∑ng {weight:.0f}kg):\n\n"

            if subcategory:
                response_message += f"Cho {subcategory.title}: Size {recommended_size['size']}\n"
                response_message += f"L√Ω do: {recommended_size['reason']}\n\n"

                # Show size guide for this subcategory
                size_guides = SizeGuide.objects.filter(subcategory=subcategory).order_by('size__order')
                if size_guides.exists():
                    response_message += f"B·∫£ng size {subcategory.title}:\n"
                    for guide in size_guides:
                        marker = "üëâ " if guide.size.name == recommended_size['size'] else "   "
                        response_message += f"{marker}Size {guide.size.name}: {guide.get_height_range()}, {guide.get_weight_range()}\n"
            else:
                response_message += f"T·ªïng qu√°t: Size {recommended_size['size']}\n"
                response_message += f"L√Ω do: {recommended_size['reason']}\n\n"
                response_message += "H√£y cho t√¥i bi·∫øt b·∫°n mu·ªën mua lo·∫°i s·∫£n ph·∫©m g√¨ (√°o thun, √°o s∆° mi, qu·∫ßn...) ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n c·ª• th·ªÉ h∆°n!"

            response_message += f"\nüí° G·ª£i √Ω: {recommended_size['note']}"

            return {
                'type': 'personal_size_recommendation',
                'message': response_message,
                'recommended_size': recommended_size['size'],
                'height': height,
                'weight': weight
            }

        except Exception as e:
            return {
                'type': 'error',
                'message': f"C√≥ l·ªói x·∫£y ra khi t∆∞ v·∫•n size: {str(e)}"
            }

    def recommend_size_for_person(self, height, weight):
        """Recommend size based on height and weight"""
        # Basic size recommendation logic
        if height <= 155 and weight <= 50:
            return {
                'size': 'S',
                'reason': 'Ph√π h·ª£p v·ªõi ng∆∞·ªùi c√≥ th·ªÉ h√¨nh nh·ªè',
                'note': 'N·∫øu th√≠ch form r·ªông c√≥ th·ªÉ ch·ªçn size M'
            }
        elif height <= 165 and weight <= 60:
            return {
                'size': 'M',
                'reason': 'Ph√π h·ª£p v·ªõi th·ªÉ h√¨nh trung b√¨nh',
                'note': 'Size ph·ªï bi·∫øn nh·∫•t, v·ª´a v·∫∑n tho·∫£i m√°i'
            }
        elif height <= 175 and weight <= 75:
            return {
                'size': 'L',
                'reason': 'Ph√π h·ª£p v·ªõi ng∆∞·ªùi cao trung b√¨nh',
                'note': 'N·∫øu th√≠ch form √¥m c√≥ th·ªÉ th·ª≠ size M'
            }
        else:
            return {
                'size': 'XL',
                'reason': 'Ph√π h·ª£p v·ªõi ng∆∞·ªùi c√≥ th·ªÉ h√¨nh l·ªõn',
                'note': 'ƒê·∫£m b·∫£o tho·∫£i m√°i khi m·∫∑c'
            }

    def search_products_by_price(self, message):
        """T√¨m s·∫£n ph·∫©m theo gi√°"""
        try:
            import re

            # Extract price from message v·ªõi teen code support
            price_patterns = [
                # Tri·ªáu patterns (highest priority)
                r'd∆∞·ªõi\s*(\d+(?:\.\d+)?)\s*tri·ªáu',           # d∆∞·ªõi 2 tri·ªáu
                r'tr√™n\s*(\d+(?:\.\d+)?)\s*tri·ªáu',           # tr√™n 1 tri·ªáu
                r't·ª´\s*(\d+(?:\.\d+)?)\s*tri·ªáu\s*ƒë·∫øn\s*(\d+(?:\.\d+)?)\s*tri·ªáu',  # t·ª´ 1 tri·ªáu ƒë·∫øn 5 tri·ªáu
                r'kho·∫£ng\s*(\d+(?:\.\d+)?)\s*tri·ªáu',         # kho·∫£ng 2 tri·ªáu
                r'(\d+(?:\.\d+)?)\s*tri·ªáu',                  # 2 tri·ªáu

                # Teen code patterns
                r'd∆∞·ªõi\s*(\d+)k',                    # d∆∞·ªõi 100k
                r'tr√™n\s*(\d+)k',                    # tr√™n 200k
                r't·ª´\s*(\d+)k\s*ƒë·∫øn\s*(\d+)k',      # t·ª´ 50k ƒë·∫øn 200k
                r'(\d+)k\s*-\s*(\d+)k',             # 100k-300k
                r'kho·∫£ng\s*(\d+)k',                 # kho·∫£ng 150k
                r'(\d+)k',                          # 100k

                # Standard patterns
                r'd∆∞·ªõi\s*(\d+)\.?(\d+)?k',          # d∆∞·ªõi 100.5k
                r'd∆∞·ªõi\s*(\d+)(?:\.000|000)',       # d∆∞·ªõi 100.000
                r't·ª´\s*(\d+)(?:\.000|000)\s*ƒë·∫øn\s*(\d+)(?:\.000|000)',  # t·ª´ 100.000 ƒë·∫øn 300.000
            ]

            max_price = None
            min_price = None

            for pattern in price_patterns:
                match = re.search(pattern, message.lower())
                if match:
                    # Determine multiplier (tri·ªáu = 1,000,000, k = 1,000)
                    multiplier = 1000000 if 'tri·ªáu' in pattern else 1000

                    if 'd∆∞·ªõi' in pattern:
                        # d∆∞·ªõi 2 tri·ªáu = d∆∞·ªõi 2,000,000
                        max_price = int(float(match.group(1)) * multiplier)
                    elif 'tr√™n' in pattern:
                        # tr√™n 1 tri·ªáu = tr√™n 1,000,000
                        min_price = int(float(match.group(1)) * multiplier)
                    elif 't·ª´' in pattern and 'ƒë·∫øn' in pattern:
                        # t·ª´ 1 tri·ªáu ƒë·∫øn 5 tri·ªáu = t·ª´ 1,000,000 ƒë·∫øn 5,000,000
                        min_price = int(float(match.group(1)) * multiplier)
                        max_price = int(float(match.group(2)) * multiplier)
                    elif '-' in pattern:
                        # 100k-300k = 100,000-300,000
                        min_price = int(float(match.group(1)) * multiplier)
                        max_price = int(float(match.group(2)) * multiplier)
                    elif 'kho·∫£ng' in pattern:
                        # kho·∫£ng 2 tri·ªáu = around 2,000,000 (¬±500k)
                        center_price = int(float(match.group(1)) * multiplier)
                        range_offset = 500000 if multiplier == 1000000 else 50000
                        min_price = center_price - range_offset
                        max_price = center_price + range_offset
                    elif 'tri·ªáu' in pattern:
                        # 2 tri·ªáu = d∆∞·ªõi 2,000,000 (default behavior)
                        max_price = int(float(match.group(1)) * multiplier)
                    elif pattern.endswith('k'):
                        # 100k = d∆∞·ªõi 100,000 (default behavior)
                        max_price = int(float(match.group(1)) * multiplier)
                    elif '000' in pattern:
                        # Handle .000 format
                        max_price = int(float(match.group(1)) * multiplier)
                    break

            if not max_price and not min_price:
                return {
                    'type': 'price_filter',
                    'message': "B·∫°n mu·ªën t√¨m s·∫£n ph·∫©m trong kho·∫£ng gi√° n√†o? V√≠ d·ª•: 'd∆∞·ªõi 100k', 't·ª´ 50k ƒë·∫øn 200k', 'tr√™n 300k'"
                }

            # Build query
            query = Product.objects.filter(countInStock__gt=0)

            if min_price:
                query = query.filter(price__gte=min_price)
            if max_price:
                query = query.filter(price__lte=max_price)

            # Get category/subcategory if mentioned
            subcategory = self.find_matching_subcategory(message.lower())
            if subcategory:
                query = query.filter(subcategory=subcategory)

            products = query.order_by('price')[:10]

            if not products.exists():
                price_range = ""
                if min_price and max_price:
                    price_range = f"t·ª´ {min_price:,}ƒë ƒë·∫øn {max_price:,}ƒë"
                elif min_price:
                    price_range = f"tr√™n {min_price:,}ƒë"
                elif max_price:
                    price_range = f"d∆∞·ªõi {max_price:,}ƒë"

                return {
                    'type': 'no_products',
                    'message': f"Hi·ªán t·∫°i kh√¥ng c√≥ s·∫£n ph·∫©m n√†o trong kho·∫£ng gi√° {price_range}. B·∫°n c√≥ th·ªÉ th·ª≠ kho·∫£ng gi√° kh√°c! üòä"
                }

            # Serialize products with price comparison
            serializer = ProductSerializer(products, many=True)
            products_data = serializer.data

            # Add price comparison info
            prices = [float(p['price']) for p in products_data]
            min_found_price = min(prices)
            max_found_price = max(prices)

            price_range_text = ""
            if min_price and max_price:
                price_range_text = f"t·ª´ {min_price:,}ƒë ƒë·∫øn {max_price:,}ƒë"
            elif min_price:
                price_range_text = f"tr√™n {min_price:,}ƒë"
            elif max_price:
                price_range_text = f"d∆∞·ªõi {max_price:,}ƒë"

            message = f"T√¨m th·∫•y {len(products)} s·∫£n ph·∫©m trong kho·∫£ng gi√° {price_range_text}:\n\n"
            message += f"üí∞ Gi√° th·∫•p nh·∫•t: {min_found_price:,.0f}ƒë\n"
            message += f"üí∞ Gi√° cao nh·∫•t: {max_found_price:,.0f}ƒë\n\n"
            message += "D∆∞·ªõi ƒë√¢y l√† danh s√°ch s·∫£n ph·∫©m (s·∫Øp x·∫øp theo gi√°):"

            return {
                'type': 'product_list',
                'message': message,
                'products': products_data,
                'count': len(products),
                'price_filter': {
                    'min_price': min_price,
                    'max_price': max_price,
                    'min_found': min_found_price,
                    'max_found': max_found_price
                }
            }

        except Exception as e:
            return {
                'type': 'error',
                'message': f"C√≥ l·ªói x·∫£y ra khi t√¨m ki·∫øm theo gi√°: {str(e)}"
            }

    def get_order_guide(self):
        """H∆∞·ªõng d·∫´n ƒë·∫∑t h√†ng kh√¥ng c√≥ markdown"""
        guide_message = """üõçÔ∏è H∆∞·ªõng d·∫´n ƒë·∫∑t h√†ng t·∫°i shop th·ªùi trang:

1. Ch·ªçn s·∫£n ph·∫©m: Ch·ªçn nh·ªØng s·∫£n ph·∫©m y√™u th√≠ch t·ª´ danh m·ª•c h√†ng h√≥a tr√™n m√†n h√¨nh ch√≠nh.

2. ƒê·∫∑t s·∫£n ph·∫©m v√†o gi·ªè h√†ng: Nh·∫•n n√∫t "Th√™m v√†o gi·ªè" ƒë·ªÉ th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng.

3. Ki·ªÉm tra l·∫°i gi·ªè h√†ng: ƒê·∫£m b·∫£o r·∫±ng c√°c s·∫£n ph·∫©m ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t ƒë√∫ng v√† s·ªë l∆∞·ª£ng ƒë·ªß.

4. ƒêƒÉng nh·∫≠p/ƒëƒÉng k√Ω t√†i kho·∫£n: N·∫øu b·∫°n ch∆∞a c√≥ t√†i kho·∫£n, h√£y ƒëƒÉng k√Ω ngay ƒë·ªÉ nh·∫≠n ∆∞u ƒë√£i ƒë·∫∑c bi·ªát. N·∫øu ƒë√£ c√≥ t√†i kho·∫£n, vui l√≤ng ƒëƒÉng nh·∫≠p.

5. Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n v√† giao h√†ng: Ch·ªçn ph∆∞∆°ng th·ª©c thanh to√°n ph√π h·ª£p (th·∫ª t√≠n d·ª•ng, chuy·ªÉn kho·∫£n ng√¢n h√†ng) v√† ch·ªçn ƒë·ªãa ch·ªâ giao h√†ng.

6. X√°c nh·∫≠n ƒë∆°n h√†ng: Nh·∫•n n√∫t "ƒê·∫∑t h√†ng" ƒë·ªÉ x√°c nh·∫≠n ƒë∆°n h√†ng c·ªßa b·∫°n.

7. Thanh to√°n v√† ch·ªù ƒë·ª£i giao h√†ng: Sau khi ƒë·∫∑t h√†ng, b·∫°n s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o v·ªÅ t√¨nh tr·∫°ng ƒë∆°n h√†ng. Ch√∫ng t√¥i s·∫Ω x·ª≠ l√Ω ƒë∆°n h√†ng nhanh ch√≥ng nh·∫•t c√≥ th·ªÉ.

N·∫øu b·∫°n c·∫ßn h·ªó tr·ª£ th√™m ho·∫∑c c√≥ c√¢u h·ªèi n√†o kh√°c, h√£y ƒë·ª´ng ng·∫ßn ng·∫°i li√™n h·ªá v·ªõi ch√∫ng t√¥i! üòä"""

        return {
            'type': 'order_guide',
            'message': guide_message
        }
